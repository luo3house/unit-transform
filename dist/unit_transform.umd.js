(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.unit_transform = {}));
})(this, (function (exports) { 'use strict';

  /** 保留N位小数，不执行四舍五入，保留0位小数=取整 */
  function formatDecimal(dec, fixes) {
    var scale = Math.pow(10, fixes);

    var atoi = function atoi(val) {
      return parseInt("".concat(val), 10) || 0;
    };

    return atoi(dec * scale) / scale;
  }

  function createUnitTransform(options) {
    var _options$scale;

    var scale = (_options$scale = options.scale) !== null && _options$scale !== void 0 ? _options$scale : 0;
    var unit = options.unit;
    var transform = {
      formatScale: function formatScale(anyTemp) {
        return formatDecimal(anyTemp, scale);
      },
      isC: function isC() {
        return unit === 'c';
      },
      isF: function isF() {
        return unit === 'f';
      },
      c2val: function c2val(c) {
        return Math.floor(transform.formatScale(c) * Math.pow(10, scale));
      },
      val2c: function val2c(c) {
        return transform.formatScale(parseFloat("".concat(parseInt("".concat(c), 10) / Math.pow(10, scale))));
      },
      c2f: function c2f(c) {
        return transform.formatScale(parseFloat("".concat(parseFloat("".concat(c * 1.8 + 32)))));
      },
      f2c: function f2c(f) {
        return transform.formatScale(parseFloat("".concat(parseFloat("".concat((f - 32) / 1.8)))));
      },
      val2cf: function val2cf(val) {
        return transform.c2cf(transform.val2c(val));
      },
      c2cf: function c2cf(c) {
        return unit === 'c' ? transform.formatScale(c) : transform.c2f(c);
      },
      f2cf: function f2cf(f) {
        return unit === 'f' ? transform.formatScale(f) : transform.f2c(f);
      },
      cf2c: function cf2c(cORf) {
        return unit === 'c' ? transform.formatScale(cORf) : transform.f2c(cORf);
      },
      cf2f: function cf2f(cORf) {
        return unit === 'f' ? transform.formatScale(cORf) : transform.c2f(cORf);
      },
      cf2val: function cf2val(cORf) {
        return unit === 'c' ? transform.c2val(cORf) : transform.c2val(transform.f2c(cORf));
      },
      tempUnitString: function tempUnitString() {
        return unit === 'c' ? '℃' : '℉';
      },
      displayTempByC: function displayTempByC(c) {
        return "".concat(transform.c2cf(c), " ").concat(transform.tempUnitString());
      },
      displayTempByVal: function displayTempByVal(val) {
        return transform.displayTempByC(transform.val2c(val));
      }
    };
    return transform;
  }

  exports.createUnitTransform = createUnitTransform;
  exports["default"] = createUnitTransform;
  exports.formatDecimal = formatDecimal;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdF90cmFuc2Zvcm0udW1kLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiLCIuLi9zcmMvdW5pdC10cmFuc2Zvcm0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIOS/neeVmU7kvY3lsI/mlbDvvIzkuI3miafooYzlm5voiI3kupTlhaXvvIzkv53nlZkw5L2N5bCP5pWwPeWPluaVtCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERlY2ltYWwoZGVjOiBudW1iZXIsIGZpeGVzOiBudW1iZXIpIHtcbiAgY29uc3Qgc2NhbGUgPSBNYXRoLnBvdygxMCwgZml4ZXMpXG4gIGNvbnN0IGF0b2kgPSAodmFsOiBhbnkpID0+IHBhcnNlSW50KGAke3ZhbH1gLCAxMCkgfHwgMFxuICByZXR1cm4gYXRvaShkZWMgKiBzY2FsZSkgLyBzY2FsZVxufVxuIiwiaW1wb3J0IHsgZm9ybWF0RGVjaW1hbCB9IGZyb20gJy4vdXRpbHMnXG5cbnR5cGUgVHJhbnNmb3JtT3B0aW9ucyA9IHtcbiAgLyoqXG4gICAqIOerr+eCueS8oOi+k+WAjeaVsO+8jOWNs+S/neeVmU7kvY3lsI/mlbBcbiAgICogQGV4YW1wbGUg56uv54K55YC8IDU277yM5Lyg6L6T5YCN5pWwIDDvvIzliJnnlYzpnaLlupTmmL7npLogNTZcbiAgICogQGV4YW1wbGUg56uv54K55YC8IDEwM++8jOS8oOi+k+WAjeaVsCAx77yM5YiZ55WM6Z2i5bqU5pi+56S6IDEwLjNcbiAgICovXG4gIHNjYWxlPzogbnVtYmVyXG4gIC8qKlxuICAgKiDmuKnmoIdcbiAgICovXG4gIHVuaXQ6ICdjJyB8ICdmJ1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5pdFRyYW5zZm9ybShvcHRpb25zOiBUcmFuc2Zvcm1PcHRpb25zKSB7XG4gIGNvbnN0IHNjYWxlID0gb3B0aW9ucy5zY2FsZSA/PyAwXG4gIGNvbnN0IHVuaXQgPSBvcHRpb25zLnVuaXRcbiAgY29uc3QgdHJhbnNmb3JtID0ge1xuICAgIGZvcm1hdFNjYWxlOiAoYW55VGVtcDogbnVtYmVyKSA9PiBmb3JtYXREZWNpbWFsKGFueVRlbXAsIHNjYWxlKSxcbiAgICBpc0M6ICgpID0+IHVuaXQgPT09ICdjJyxcbiAgICBpc0Y6ICgpID0+IHVuaXQgPT09ICdmJyxcbiAgICBjMnZhbDogKGM6IG51bWJlcikgPT4gTWF0aC5mbG9vcih0cmFuc2Zvcm0uZm9ybWF0U2NhbGUoYykgKiAxMCAqKiBzY2FsZSksXG4gICAgdmFsMmM6IChjOiBudW1iZXIgfCBhbnkpID0+XG4gICAgICB0cmFuc2Zvcm0uZm9ybWF0U2NhbGUoXG4gICAgICAgIHBhcnNlRmxvYXQoYCR7cGFyc2VJbnQoYCR7Y31gLCAxMCkgLyAxMCAqKiBzY2FsZX1gKVxuICAgICAgKSxcbiAgICBjMmY6IChjOiBudW1iZXIpID0+XG4gICAgICB0cmFuc2Zvcm0uZm9ybWF0U2NhbGUocGFyc2VGbG9hdChgJHtwYXJzZUZsb2F0KGAke2MgKiAxLjggKyAzMn1gKX1gKSksXG4gICAgZjJjOiAoZjogbnVtYmVyKSA9PlxuICAgICAgdHJhbnNmb3JtLmZvcm1hdFNjYWxlKHBhcnNlRmxvYXQoYCR7cGFyc2VGbG9hdChgJHsoZiAtIDMyKSAvIDEuOH1gKX1gKSksXG4gICAgdmFsMmNmOiAodmFsOiBudW1iZXIpID0+IHRyYW5zZm9ybS5jMmNmKHRyYW5zZm9ybS52YWwyYyh2YWwpKSxcbiAgICBjMmNmOiAoYzogbnVtYmVyKSA9PlxuICAgICAgdW5pdCA9PT0gJ2MnID8gdHJhbnNmb3JtLmZvcm1hdFNjYWxlKGMpIDogdHJhbnNmb3JtLmMyZihjKSxcbiAgICBmMmNmOiAoZjogbnVtYmVyKSA9PlxuICAgICAgdW5pdCA9PT0gJ2YnID8gdHJhbnNmb3JtLmZvcm1hdFNjYWxlKGYpIDogdHJhbnNmb3JtLmYyYyhmKSxcbiAgICBjZjJjOiAoY09SZjogbnVtYmVyKSA9PlxuICAgICAgdW5pdCA9PT0gJ2MnID8gdHJhbnNmb3JtLmZvcm1hdFNjYWxlKGNPUmYpIDogdHJhbnNmb3JtLmYyYyhjT1JmKSxcbiAgICBjZjJmOiAoY09SZjogbnVtYmVyKSA9PlxuICAgICAgdW5pdCA9PT0gJ2YnID8gdHJhbnNmb3JtLmZvcm1hdFNjYWxlKGNPUmYpIDogdHJhbnNmb3JtLmMyZihjT1JmKSxcbiAgICBjZjJ2YWw6IChjT1JmOiBudW1iZXIpID0+XG4gICAgICB1bml0ID09PSAnYydcbiAgICAgICAgPyB0cmFuc2Zvcm0uYzJ2YWwoY09SZilcbiAgICAgICAgOiB0cmFuc2Zvcm0uYzJ2YWwodHJhbnNmb3JtLmYyYyhjT1JmKSksXG4gICAgdGVtcFVuaXRTdHJpbmc6ICgpID0+ICh1bml0ID09PSAnYycgPyAn4oSDJyA6ICfihIknKSxcbiAgICBkaXNwbGF5VGVtcEJ5QzogKGM6IG51bWJlcikgPT5cbiAgICAgIGAke3RyYW5zZm9ybS5jMmNmKGMpfSAke3RyYW5zZm9ybS50ZW1wVW5pdFN0cmluZygpfWAsXG4gICAgZGlzcGxheVRlbXBCeVZhbDogKHZhbDogbnVtYmVyKSA9PlxuICAgICAgdHJhbnNmb3JtLmRpc3BsYXlUZW1wQnlDKHRyYW5zZm9ybS52YWwyYyh2YWwpKSxcbiAgfVxuICByZXR1cm4gdHJhbnNmb3JtXG59XG4iXSwibmFtZXMiOlsiZm9ybWF0RGVjaW1hbCIsImRlYyIsImZpeGVzIiwic2NhbGUiLCJNYXRoIiwicG93IiwiYXRvaSIsInZhbCIsInBhcnNlSW50IiwiY3JlYXRlVW5pdFRyYW5zZm9ybSIsIm9wdGlvbnMiLCJ1bml0IiwidHJhbnNmb3JtIiwiZm9ybWF0U2NhbGUiLCJhbnlUZW1wIiwiaXNDIiwiaXNGIiwiYzJ2YWwiLCJjIiwiZmxvb3IiLCJ2YWwyYyIsInBhcnNlRmxvYXQiLCJjMmYiLCJmMmMiLCJmIiwidmFsMmNmIiwiYzJjZiIsImYyY2YiLCJjZjJjIiwiY09SZiIsImNmMmYiLCJjZjJ2YWwiLCJ0ZW1wVW5pdFN0cmluZyIsImRpc3BsYXlUZW1wQnlDIiwiZGlzcGxheVRlbXBCeVZhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0VBQUE7RUFDTyxTQUFTQSxhQUFULENBQXVCQyxHQUF2QixF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
