(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.unit_transform = {}));
})(this, (function (exports) { 'use strict';

  /** 保留N位小数，不执行四舍五入，保留0位小数=取整 */
  function formatDecimal(dec, fixes) {
    var scale = Math.pow(10, fixes);

    var atoi = function atoi(val) {
      return parseInt("".concat(val), 10) || 0;
    };

    return atoi(dec * scale) / scale;
  }

  function createUnitTransfer(options) {
    var _options$scale;

    var scale = (_options$scale = options.scale) !== null && _options$scale !== void 0 ? _options$scale : 0;
    var unit = options.unit;
    var transfer = {
      formatScale: function formatScale(anyTemp) {
        return formatDecimal(anyTemp, scale);
      },
      isC: function isC() {
        return unit === 'c';
      },
      isF: function isF() {
        return unit === 'f';
      },
      c2val: function c2val(c) {
        return Math.floor(transfer.formatScale(c) * Math.pow(10, scale));
      },
      val2c: function val2c(c) {
        return transfer.formatScale(parseFloat("".concat(parseInt("".concat(c), 10) / Math.pow(10, scale))));
      },
      c2f: function c2f(c) {
        return transfer.formatScale(parseFloat("".concat(parseFloat("".concat(c * 1.8 + 32)))));
      },
      f2c: function f2c(f) {
        return transfer.formatScale(parseFloat("".concat(parseFloat("".concat((f - 32) / 1.8)))));
      },
      val2cf: function val2cf(val) {
        return transfer.c2cf(transfer.val2c(val));
      },
      c2cf: function c2cf(c) {
        return unit === 'c' ? transfer.formatScale(c) : transfer.c2f(c);
      },
      f2cf: function f2cf(f) {
        return unit === 'f' ? transfer.formatScale(f) : transfer.f2c(f);
      },
      cf2c: function cf2c(cORf) {
        return unit === 'c' ? transfer.formatScale(cORf) : transfer.f2c(cORf);
      },
      cf2f: function cf2f(cORf) {
        return unit === 'f' ? transfer.formatScale(cORf) : transfer.c2f(cORf);
      },
      cf2val: function cf2val(cORf) {
        return unit === 'c' ? transfer.c2val(cORf) : transfer.c2val(transfer.f2c(cORf));
      },
      tempUnitString: function tempUnitString() {
        return unit === 'c' ? '℃' : '℉';
      },
      displayTempByC: function displayTempByC(c) {
        return "".concat(transfer.c2cf(c), " ").concat(transfer.tempUnitString());
      },
      displayTempByVal: function displayTempByVal(val) {
        return transfer.displayTempByC(transfer.val2c(val));
      }
    };
    return transfer;
  }

  exports.createUnitTransfer = createUnitTransfer;
  exports["default"] = createUnitTransfer;
  exports.formatDecimal = formatDecimal;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pdF90cmFuc2Zvcm0udW1kLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiLCIuLi9zcmMvdW5pdC10cmFuc2Zvcm0udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIOS/neeVmU7kvY3lsI/mlbDvvIzkuI3miafooYzlm5voiI3kupTlhaXvvIzkv53nlZkw5L2N5bCP5pWwPeWPluaVtCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERlY2ltYWwoZGVjOiBudW1iZXIsIGZpeGVzOiBudW1iZXIpIHtcbiAgY29uc3Qgc2NhbGUgPSBNYXRoLnBvdygxMCwgZml4ZXMpXG4gIGNvbnN0IGF0b2kgPSAodmFsOiBhbnkpID0+IHBhcnNlSW50KGAke3ZhbH1gLCAxMCkgfHwgMFxuICByZXR1cm4gYXRvaShkZWMgKiBzY2FsZSkgLyBzY2FsZVxufVxuIiwiaW1wb3J0IHsgZm9ybWF0RGVjaW1hbCB9IGZyb20gJy4vdXRpbHMnXG5cbnR5cGUgVHJhbnNmZXJPcHRpb25zID0ge1xuICAvKipcbiAgICog56uv54K55Lyg6L6T5YCN5pWw77yM5Y2z5L+d55WZTuS9jeWwj+aVsFxuICAgKiBAZXhhbXBsZSDnq6/ngrnlgLwgNTbvvIzkvKDovpPlgI3mlbAgMO+8jOWImeeVjOmdouW6lOaYvuekuiA1NlxuICAgKiBAZXhhbXBsZSDnq6/ngrnlgLwgMTAz77yM5Lyg6L6T5YCN5pWwIDHvvIzliJnnlYzpnaLlupTmmL7npLogMTAuM1xuICAgKi9cbiAgc2NhbGU/OiBudW1iZXJcbiAgLyoqXG4gICAqIOa4qeagh1xuICAgKi9cbiAgdW5pdDogJ2MnIHwgJ2YnXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbml0VHJhbnNmZXIob3B0aW9uczogVHJhbnNmZXJPcHRpb25zKSB7XG4gIGNvbnN0IHNjYWxlID0gb3B0aW9ucy5zY2FsZSA/PyAwXG4gIGNvbnN0IHVuaXQgPSBvcHRpb25zLnVuaXRcbiAgY29uc3QgdHJhbnNmZXIgPSB7XG4gICAgZm9ybWF0U2NhbGU6IChhbnlUZW1wOiBudW1iZXIpID0+IGZvcm1hdERlY2ltYWwoYW55VGVtcCwgc2NhbGUpLFxuICAgIGlzQzogKCkgPT4gdW5pdCA9PT0gJ2MnLFxuICAgIGlzRjogKCkgPT4gdW5pdCA9PT0gJ2YnLFxuICAgIGMydmFsOiAoYzogbnVtYmVyKSA9PiBNYXRoLmZsb29yKHRyYW5zZmVyLmZvcm1hdFNjYWxlKGMpICogMTAgKiogc2NhbGUpLFxuICAgIHZhbDJjOiAoYzogbnVtYmVyIHwgYW55KSA9PlxuICAgICAgdHJhbnNmZXIuZm9ybWF0U2NhbGUocGFyc2VGbG9hdChgJHtwYXJzZUludChgJHtjfWAsIDEwKSAvIDEwICoqIHNjYWxlfWApKSxcbiAgICBjMmY6IChjOiBudW1iZXIpID0+XG4gICAgICB0cmFuc2Zlci5mb3JtYXRTY2FsZShwYXJzZUZsb2F0KGAke3BhcnNlRmxvYXQoYCR7YyAqIDEuOCArIDMyfWApfWApKSxcbiAgICBmMmM6IChmOiBudW1iZXIpID0+XG4gICAgICB0cmFuc2Zlci5mb3JtYXRTY2FsZShwYXJzZUZsb2F0KGAke3BhcnNlRmxvYXQoYCR7KGYgLSAzMikgLyAxLjh9YCl9YCkpLFxuICAgIHZhbDJjZjogKHZhbDogbnVtYmVyKSA9PiB0cmFuc2Zlci5jMmNmKHRyYW5zZmVyLnZhbDJjKHZhbCkpLFxuICAgIGMyY2Y6IChjOiBudW1iZXIpID0+XG4gICAgICB1bml0ID09PSAnYycgPyB0cmFuc2Zlci5mb3JtYXRTY2FsZShjKSA6IHRyYW5zZmVyLmMyZihjKSxcbiAgICBmMmNmOiAoZjogbnVtYmVyKSA9PlxuICAgICAgdW5pdCA9PT0gJ2YnID8gdHJhbnNmZXIuZm9ybWF0U2NhbGUoZikgOiB0cmFuc2Zlci5mMmMoZiksXG4gICAgY2YyYzogKGNPUmY6IG51bWJlcikgPT5cbiAgICAgIHVuaXQgPT09ICdjJyA/IHRyYW5zZmVyLmZvcm1hdFNjYWxlKGNPUmYpIDogdHJhbnNmZXIuZjJjKGNPUmYpLFxuICAgIGNmMmY6IChjT1JmOiBudW1iZXIpID0+XG4gICAgICB1bml0ID09PSAnZicgPyB0cmFuc2Zlci5mb3JtYXRTY2FsZShjT1JmKSA6IHRyYW5zZmVyLmMyZihjT1JmKSxcbiAgICBjZjJ2YWw6IChjT1JmOiBudW1iZXIpID0+XG4gICAgICB1bml0ID09PSAnYycgPyB0cmFuc2Zlci5jMnZhbChjT1JmKSA6IHRyYW5zZmVyLmMydmFsKHRyYW5zZmVyLmYyYyhjT1JmKSksXG4gICAgdGVtcFVuaXRTdHJpbmc6ICgpID0+ICh1bml0ID09PSAnYycgPyAn4oSDJyA6ICfihIknKSxcbiAgICBkaXNwbGF5VGVtcEJ5QzogKGM6IG51bWJlcikgPT5cbiAgICAgIGAke3RyYW5zZmVyLmMyY2YoYyl9ICR7dHJhbnNmZXIudGVtcFVuaXRTdHJpbmcoKX1gLFxuICAgIGRpc3BsYXlUZW1wQnlWYWw6ICh2YWw6IG51bWJlcikgPT5cbiAgICAgIHRyYW5zZmVyLmRpc3BsYXlUZW1wQnlDKHRyYW5zZmVyLnZhbDJjKHZhbCkpLFxuICB9XG4gIHJldHVybiB0cmFuc2ZlclxufVxuIl0sIm5hbWVzIjpbImZvcm1hdERlY2ltYWwiLCJkZWMiLCJmaXhlcyIsInNjYWxlIiwiTWF0aCIsInBvdyIsImF0b2kiLCJ2YWwiLCJwYXJzZUludCIsImNyZWF0ZVVuaXRUcmFuc2ZlciIsIm9wdGlvbnMiLCJ1bml0IiwidHJhbnNmZXIiLCJmb3JtYXRTY2FsZSIsImFueVRlbXAiLCJpc0MiLCJpc0YiLCJjMnZhbCIsImMiLCJmbG9vciIsInZhbDJjIiwicGFyc2VGbG9hdCIsImMyZiIsImYyYyIsImYiLCJ2YWwyY2YiLCJjMmNmIiwiZjJjZiIsImNmMmMiLCJjT1JmIiwiY2YyZiIsImNmMnZhbCIsInRlbXBVbml0U3RyaW5nIiwiZGlzcGxheVRlbXBCeUMiLCJkaXNwbGF5VGVtcEJ5VmFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7RUFBQTtFQUNPLFNBQVNBLGFBQVQsQ0FBdUJDLEdBQXZCLEVBQW9DQyxLQUFwQyxFQUFtRDtJQUN4RCxJQUFNQyxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLEVB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
